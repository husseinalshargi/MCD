@using MCD.Models.ViewModels
@model MoreInfoVM
<h1>More info about the document</h1>


<form method="post" asp-action="AdjustDocument" enctype="multipart/form-data">
    <!-- hidden field to pass IDs without the user input it-->
    <input type="hidden" name="DocumentID" value="@Model.Document.Id" />
    <!-- passing the name so that we don't just create a new one later with the same name-->
    <input type="hidden" name="CategoryName" value="@Model.Document.Category.CategoryName" />
    <table id="moreInfoTable" class="moreInfoTable" style="width:100%">
        <thead id="moreInfoHead">
            <tr>
                <th>Document</th>
                <th>Author</th>
                <th>File Name</th>
                <th>Title</th>
                <th>Category</th>
                <th>Upload Date</th>
                <th>Update Date</th>
                <th>Summarize</th>
                <th>Update</th>
                <th>Delete</th>
                <th>AI Task Status</th>
            </tr>
        </thead>
        <tbody id="moreInfoBody">
            <tr class="spacer-row"><td colspan="3"></td></tr>
            <tr>
                <td>
                    <button onclick="openDocument('@Model.Document.ApplicationUserId', '@Model.Document.FileName')" class="btn btn-secondary">
                        <i class="bi bi-file-earmark"></i> Open Document
                    </button>
                </td>
                <td .disabled>@Model.Document.ApplicationUser.Email</td>
                <td .disbaled>@Model.Document.FileName</td>
                <td>
                    <input name="Title" type="text" class="form-control border-0 shadow"
                           maxlength="50" required value="@Model.Document.Title" placeholder="@Model.Document.Title">
                </td>
                <td>
                    <select name="Category" id="CategoryDropdown" class="form-control border-0 shadow" required onchange="toggleNewCategoryField()">
                        <option value="">Select a Category</option>
                        @foreach (var category in Model.CategoryList)
                        {
                            @if (category.Id == Model.Document.CategoryId)
                            {
                                <option value="@category.Id" selected>
                                    @category.CategoryName
                                </option>
                            }
                            else
                            {
                                <option value="@category.Id">
                                    @category.CategoryName
                                </option>
                            }

                        }
                        <option value="new">Add New Category</option> <!-- Option to add new category -->
                    </select>
                </td>
                <td .disbaled>@Model.Document.UploadDate</td>
                <td .disbaled>@Model.Document.UpdateDate</td>
                <!-- buttons with name="action" to distinguish in order to use a variable called action in the controller -->
                <td><button type="submit" name="action" value="Summarize" class="btn btn-secondary">Summarize</button></td>
                <td><button type="submit" name="action" value="Update" class="btn btn-secondary">Update</button></td>
                <td><button type="submit" name="action" value="Delete" class="btn btn-secondary">Delete</button></td>
                <td>Currently not available</td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    <input name="NewCategory" id="NewCategoryInput" type="text" class="form-control border-0 shadow" maxlength="30" required placeholder="Enter New Category" style="display:none;">
                </td>
            </tr>
        </tbody>
    </table>
</form>
<!-- the action name is uploadshareddocument -->
<form method="post" asp-action="UploadSharedDocument" enctype="multipart/form-data">
    <hr class="mb-4">

    <!-- hidden field to pass DocumentID without the user input it-->
    <input type="hidden" name="DocumentID" value="@Model.Document,Id" />

    <table id="addShared" class="addShared" style="width:100%">
        <thead id="addSharedHead">
            <tr>
                <th>User Email to Share document</th>
                <th>Share</th>
            </tr>
        </thead>
        <tbody id="addShareBody">
            <tr class="spacer-row"><td colspan="3"></td></tr>
            <tr>
                <td>
                    <label class="ms-2">Email</label>
                    <input name="SharedToEmail" class="form-control border-0 shadow"
                           required
                           type="email"
                           placeholder="Enter a valid email" />
                    <span class="text-danger"></span>
                </td>
                <td>
                    <!-- Submit button to post the form -->
                    <button type="submit" class="btn btn-secondary">
                        <i class="bi bi-share-fill"></i> - Share to Other User
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
</form>
<div class="text-center fixed-bottom-center" style="margin-bottom: 60px;">
    <!-- to place the back button always down in the center in top of the bottom header-->
    <a href="/home/document" class="btn btn-info mx-2"> <i class="bi bi-arrow-return-left"></i> Back </a>
</div>

<hr class="mb-4">

<div class="sumPart">
    <h2>Summarization</h2>
    <p id="summarizationBox">Here we plug in the summarization (maybe we'll edit the tag later if we want to allow the user to change some of the text)</p>
</div>




@section Scripts {
    <script>
        function toggleNewCategoryField() { //for the dropdown selection to show/hide the new category input field based on the dropdown selection
            var categoryDropdown = document.getElementById("CategoryDropdown");
            var newCategoryInput = document.getElementById("NewCategoryInput");

             //  Add New Category is selected show the input field for new category else do not
            if (categoryDropdown.value == "new") {
                newCategoryInput.style.display = "block";
            } else {
                newCategoryInput.style.display = "none";
            }
        }

        function openDocument(userId, fileName) { // a function to call inside render for getting html in the table
            $.ajax({
                url: `/home/GetDocument?userId=${userId}&fileName=${fileName}`, //in order to use the same fumction in the home controller to open the document (to avoid duplication)
                type: 'GET',
                success: function (response) {
                    if (response && response.fileUrl) {
                        window.open(response.fileUrl, '_blank'); // Open in new tab -> _self to open in the same page
                    } else {
                        alert("Error: Unable to fetch the document.");
                    }
                },
                error: function (xhr) {
                    console.log("AJAX Error:", xhr.responseText);
                    alert("Error: Could not open the document.");
                }
            });
        }
    </script>
}


@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}